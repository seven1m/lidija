%{

#include <string.h>
#include <glib.h>

int yy_input(char *buf, int max_size);

#define YY_INPUT(b, r, ms) (r = yy_input(b, ms))

#define YYSTYPE void*

GSList* parse_ast;

#define STACK_LEN 1024
#define MAX_ARG_COUNT 255

node* stack[STACK_LEN][MAX_ARG_COUNT]; /* holds lists of data */
int stack_count[STACK_LEN];             /* number of items at each level in the stack */
int stackp = 0;                        /* position on stack */

#define P_NEW(n, v)           malloc(sizeof(node*))
#define P_NEW2(n, v1, v2)     malloc(sizeof(node*))
#define P_NEW3(n, v1, v2, v3) malloc(sizeof(node*))
#define P_ADD(node)           (parse_ast = g_slist_append(parse_ast, node))

node* rb_ary_new();

void stack_push();
void stack_add(node*);
node** stack_pop();

char* yytos(char*, int);

node* create_int_node(char*, int);
node* create_str_node(char*, int);
node* create_rng_node(node*, node*);
node* create_var_node(char*);
node* create_call_node(char*, int, node**);
node* create_err_node(char*);

%}

body       = (
             e:lexpr                               { e && P_ADD(e); }
             )+ eof
           | lexpr* bad eof

bad        = < .+ >                                { P_ADD(create_err_node(yytos(yytext, yyleng))); }

lexpr      = -* (
             empty-line
           | comment
           | icall
           | assign
           | expr
             ) -* --?

assign     = (name:identifier | name:symbol) -+
             "=" -+
             (val:icall | val:expr)                { $$ = P_NEW2("assign", name, val); }

icall      = name:identifier                       { stack_push(); }
             (
             arg-sep arg:expr                      { stack_add(arg); }
             )+                                    { $$ = create_call_node(name, stack_count[stackp], stack_pop()); }

ecall      = "(" name:identifier                   { stack_push(); }
             (
             arg-sep arg:expr                      { stack_add(arg); }
             )* ")"                                { $$ = create_call_node(name, stack_count[stackp], stack_pop()); }

arg-sep    = "," (- | --)* | -+

expr       = op
           | eop
           | ecall
           | func
           | list
           | atom

func       = args:func-args
             "{" (- | --)*                         { stack_push(); }
             (
             e:lexpr                               { if(e) stack_add(e); }
             )+
             -* "}"                                { $$ = P_NEW2("func", args ? args : rb_ary_new(), stack_pop()); }

func-args  = "["                                   { stack_push(); }
             ( -*
             arg:identifier                        { stack_add(arg); }
             )+ -*
             "]" -*                                { $$ = stack_pop(); }
           | &"{"                                  { $$ = 0; }

op         = left:operand -+
             symbol:symbol -+
             right:operand                         { node** args = malloc(sizeof(node*) * 2);
                                                     args[0] = left;
                                                     args[1] = right;
                                                     $$ = create_call_node(symbol, 2, args); }

eop        = "(" op ")"

operand    = list
           | atom
           | eop
           | ecall

atom       = var
           | string
           | range
           | integer

list-sep   = - | -- | ","

list       = "[" -*                                { stack_push(); }
             (
             e:expr list-sep*                      { stack_add(e); }
             )*
             "]"                                   { $$ = P_NEW("list", stack_pop()); }

rangeop    = var
           | integer
           | eop
           | ecall

range      = first:rangeop ".." last:rangeop       { $$ = create_rng_node(first, last); }

var        = name:identifier                       { $$ = create_var_node(name); }

dq         = "\""
sq         = "\'"
ndq        = !dq .
nsq        = !sq .
esc        = "\\" .
string     = dq < (esc | ndq)* > dq                { $$ = create_str_node(yytext, yyleng); }
           | sq < (esc | nsq)* > sq                { $$ = create_str_node(yytext, yyleng); }

empty-line = -* --                                 { $$ = 0; }
comment    = -* '#' [^\r\n]* --?                   { $$ = 0; }

symbol     = < [-~`!?@$%^&*_+|/,.<>]+ >            { $$ = yytos(yytext, yyleng); }
           | < [-~`!?@$%^&*_+|/,.<>=]
               [-~`!?@$%^&*_+|/,.<>=]+ >           { $$ = yytos(yytext, yyleng); }

identifier = < [a-z] [a-z0-9-]* >                  { $$ = yytos(yytext, yyleng); }

integer    = < digit+ >                            { $$ = create_int_node(yytext, yyleng); }

digit      = [0-9]

-          = [ \t]
--         = [\r]? [\n]
eof        = !.

%%

/* borrowed from O'Reilly book "lex & yacc" pg. 157 */
char *yy_input_ptr;
int yy_input_len;

node* rb_ary_new() {
  printf("noop\n");
  return (node*)malloc(sizeof(node));
}

void stack_push() {
  if(++stackp == STACK_LEN) exit(1);
  stack_count[stackp] = 0;
}

void stack_add(node* n) {
  stack[stackp][stack_count[stackp]++] = n;
}

node** stack_pop() {
  int i;
  node** args = malloc(sizeof(node*) * stack_count[stackp]);
  for(i=0; i<stack_count[stackp]; i++) args[i] = stack[stackp][i];
  stackp--;
  return args;
}

char* yytos(char* yytext, int yyleng) {
  char* s = malloc(sizeof(char) * (yyleng + 1));
  strcpy(s, "");
  strncat(s, yytext, yyleng);
  return s;
}

node* create_int_node(char* yytext, int yyleng) {
  node* n = malloc(sizeof(node));
  n->type = num_type;
  n->value.num = atoi(yytext);
  return n;
}

node* create_str_node(char* yytext, int yyleng) {
  node* n = malloc(sizeof(node));
  n->type = str_type;
  n->value.str = malloc(sizeof(char) * (yyleng + 1));
  strcpy(n->value.str, "");
  strncat(n->value.str, yytext, yyleng);
  return n;
}

node* create_rng_node(node* first, node* last) {
  node* n = malloc(sizeof(node));
  n->type = range_type;
  n->value.range.first = first;
  n->value.range.last = last;
  return n;
}

node* create_var_node(char* name) {
  node* n = malloc(sizeof(node));
  n->type = var_type;
  n->value.var = name;
  return n;
}

node* create_call_node(char* name, int argc, node** args) {
  node* n = malloc(sizeof(node));
  n->type = call_type;
  n->value.call.name = name;
  n->value.call.argc = argc;
  n->value.call.args = args;
  return n;
}

node* create_err_node(char* error) {
  node* n = malloc(sizeof(node));
  n->type = err_type;
  n->value.err = error;
  return n;
}

int yy_input(char *buf, int max_size) {
  int len = strlen(yy_input_ptr);
  int n = max_size < len ? max_size : len;
  if(n > 0) {
    memcpy(buf, yy_input_ptr, n);
    yy_input_ptr += n;
  }
  return n;
}

GSList* airball_parse(char *source) {
  parse_ast = NULL;
  yy_input_ptr = source;
  yy_input_len = strlen(yy_input_ptr);
  while (yyparse());
  return parse_ast;
}
