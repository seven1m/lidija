%{
#include "lidija.h"
int l_stackp = 0;
int l_line_no;
char *l_source_file;
%}

body       = (
             e:lexpr                               { if(e) { l_ast_add_node(e); } }
             )+ eof
           | lexpr* bad eof

bad        = < .+ >                                { l_ast_add_node(l_create_err_node(yytos(yytext, yyleng), l_line_no)); }

lexpr      = -* (
             empty-line
           | comment
           | icall
           | assign
           | expr
             ) -* --?

assign     = (name:identifier | name:symbol) -+
             "=" -+
             (val:icall | val:expr)                { $$ = l_create_assign_node(name, val); }

icall      = name:identifier                       { l_stack_push(); }
             (
             arg-sep arg:expr                      { l_stack_add(arg); }
             )+                                    { int count = l_stack_count[l_stackp];
                                                     $$ = l_create_call_node(name, count, l_stack_pop()); }

ecall      = "(" name:identifier                   { l_stack_push(); }
             (
             arg-sep arg:expr                      { l_stack_add(arg); }
             )* ")"                                { int count = l_stack_count[l_stackp];
                                                     $$ = l_create_call_node(name, count, l_stack_pop()); }

arg-sep    = "," (- | --)* | -+

expr       = op
           | eop
           | ecall
           | func
           | list
           | atom

func       = args:func-args
             "{" (- | --)*                         { l_stack_push(); }
             (
             e:lexpr                               { if(e) l_stack_add(e); }
             )+
             -* "}"                                { int count = l_stack_count[l_stackp];
                                                     $$ = l_create_func_node(args, count, l_stack_pop()); }

func-args  = "["                                   { l_stack_push(); }
             ( -*
             arg:identifier                        { l_stack_add(l_create_var_node(arg)); }
             )+ -*
             "]" -*                                { int count = l_stack_count[l_stackp];
                                                     $$ = l_create_list_node(count, l_stack_pop()); }
           | &"{"                                  { $$ = l_create_list_node(0, NULL); }

op         = left:operand -+
             symbol:symbol -+
             right:operand                         { LNode **args = GC_MALLOC(sizeof(LNode*) * 2);
                                                     args[0] = left;
                                                     args[1] = right;
                                                     $$ = l_create_call_node(symbol, 2, args); }

eop        = "(" op ")"

operand    = list
           | atom
           | eop
           | ecall

atom       = var
           | string
           | integer

list-sep   = - | -- | ","

list       = "[" -*                                { l_stack_push(); }
             (
             e:expr list-sep*                      { l_stack_add(e); }
             )*
             "]"                                   { int count = l_stack_count[l_stackp];
                                                     $$ = l_create_list_node(count, l_stack_pop()); }

var        = name:identifier                       { $$ = l_create_var_node(name); }

dq         = "\""
sq         = "\'"
ndq        = !dq .
nsq        = !sq .
esc        = "\\" .
string     = dq < (esc | ndq)* > dq                { $$ = l_create_str_node(yytos(yytext, yyleng)); }
           | sq < (esc | nsq)* > sq                { $$ = l_create_str_node(yytos(yytext, yyleng)); }

empty-line = -* --                                 { $$ = 0; }
comment    = -* '#' [^\r\n]* --?                   { $$ = 0; }

symbol     = < sym-eq sym-eq+ >                    { $$ = yytos(yytext, yyleng); }
           | < sym+ >                              { $$ = yytos(yytext, yyleng); }

identifier = < (sym-eq | digit)*
               alpha
               (sym-eq | digit | alpha)* >         { $$ = yytos(yytext, yyleng); }

integer    = < digit+ >                            { $$ = l_create_num_node(yytos(yytext, yyleng)); }

digit      = [0-9]
alpha      = [a-z]

sym        = [-~:!?@$%^&*_+|/.<>]
sym-eq     = [-~:!?@$%^&*_+|/.<>=]

-          = [ \t]
--         = [\r]? [\n]                            { l_line_no++; }
eof        = !.

%%

void l_stack_push() {
  if(++l_stackp == STACK_LEN) exit(1);
  l_stack_count[l_stackp] = 0;
}

void l_stack_add(LNode *n) {
  l_stack[l_stackp][l_stack_count[l_stackp]++] = n;
}

LNode **l_stack_pop() {
  int i;
  LNode **args = GC_MALLOC(sizeof(LNode*) * l_stack_count[l_stackp]);
  for(i=0; i<l_stack_count[l_stackp]; i++) args[i] = l_stack[l_stackp][i];
  l_stackp--;
  return args;
}

char *yytos(char *yytext, int yyleng) {
  char *s = GC_MALLOC(sizeof(char) * (yyleng + 1));
  strcpy(s, "");
  strncat(s, yytext, yyleng);
  return s;
}

LNode *l_create_ast_node(enum LNodeType type) {
  LNode *n = GC_MALLOC(sizeof(LNode));
  n->type = type;
  n->line_no = l_line_no;
  n->source_file = GC_MALLOC(strlen(l_source_file) + 1);
  strcpy(n->source_file, l_source_file);
  return n;
}

LNode *l_create_num_node(char *num) {
  LNode *n = l_create_ast_node(L_NUM_TYPE);
  n->val = num;
  return n;
}

LNode *l_create_str_node(char *str) {
  LNode *n = l_create_ast_node(L_STR_TYPE);
  n->val = str;
  return n;
}

LNode *l_create_var_node(char *name) {
  LNode *n = l_create_ast_node(L_VAR_TYPE);
  n->val = name;
  return n;
}

LNode *l_create_assign_node(char *name, LNode *expr) {
  LNode *n = l_create_ast_node(L_ASSIGN_TYPE);
  n->val = name;
  n->exprc = 1;
  n->exprs = GC_MALLOC(sizeof(LNode*));
  n->exprs[0] = expr;
  return n;
}

LNode *l_create_call_node(char *name, int argc, LNode **args) {
  LNode *n = l_create_ast_node(L_CALL_TYPE);
  n->val = name;
  n->exprc = argc;
  n->exprs = args;
  return n;
}

LNode *l_create_list_node(int itemc, LNode **items) {
  LNode *n = l_create_ast_node(L_LIST_TYPE);
  n->exprc = itemc;
  n->exprs = items;
  return n;
}

LNode *l_create_func_node(LNode *args, int exprc, LNode **exprs) {
  LNode *n = l_create_ast_node(L_FUNC_TYPE);
  LNode *exprsNode = GC_MALLOC(sizeof(LNode));
  exprsNode->type = L_LIST_TYPE;
  exprsNode->exprc = exprc;
  exprsNode->exprs = exprs;
  n->exprc = 2;
  n->exprs = GC_MALLOC(sizeof(LNode*) * 2);
  n->exprs[0] = args;
  n->exprs[1] = exprsNode;
  return n;
}

LNode *l_create_err_node(char *error, int line) {
  LNode *n = l_create_ast_node(L_ERR_TYPE);
  char *buf = GC_MALLOC(sizeof(char) * 255);
  snprintf(buf, 254, "line %d: %s", line, error);
  n->val = buf;
  return n;
}

// borrowed from O'Reilly book "lex & yacc" pg. 157
int yy_input(char *buf, int max_size) {
  int len = strlen(yy_input_ptr);
  int n = max_size < len ? max_size : len;
  if(n > 0) {
    memcpy(buf, yy_input_ptr, n);
    yy_input_ptr += n;
  }
  return n;
}

LAst l_parse(const char *source, const char *source_file) {
  L_AST = create_list();
  l_source_file = source_file;
  l_line_no = 1;
  yy_input_ptr = source;
  yy_input_len = strlen(yy_input_ptr);
  while (yyparse());
  return L_AST;
}
